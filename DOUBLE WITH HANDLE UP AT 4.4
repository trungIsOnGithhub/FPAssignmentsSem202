//The library here is concretely set, students are not allowed to include any other libraries.
#include <iostream>
#include <iomanip>
#include <cmath>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

////////////////////////////////////////////////////////////////////////////
/// STUDENT'S ANSWER HERE
////////////////////////////////////////////////////////////////////////////

string unwantedChar1(string str, int strsize){
    for (unsigned int  i = 0; i<strsize; ++i){
        if (str[i]=='#' || str[i]=='@'){
            str.erase(str.begin()+i);
            --i;
        }
    }
    return str;
}
string decryptBinary(string str, int strsize){
    string empty = "";
    unsigned int i = 0;
    while (i<strsize){
        if (str[i]==' '){
            ++i;
            empty += " ";
            continue;
        } 
        else if (str[i]=='0'){
            ++i;
            if (str[i]=='0') empty += "0";
            else if (str[i]=='1') empty +="1";
            ++i;
        }
        else if(str[i]=='1'){
            ++i;
            if (str[i]=='0') empty += "2";
            else if (str[i]=='1') empty +="3";
            ++i;
        }
    }
    return empty;
}

string decryptIntoChar(string str, int strsize){
    string lookuptab[4][7] = {{"E","F","G","H","I","J","K"},
                              {"L","M","N","O","P","Q","R"},
                              {"#","T","U","V","W","X","Y"},
                              {"@","A","S","Z","B","C","D"}};
    string empty = ""; 
    int count = 0;
    unsigned int i = 0;
    char temp; 
    while (i<strsize){
        if (str[i]>=48 && str[i]<=51){ 
            if (i==strsize-1 && str[strsize-2]==str[strsize-1]){
                ++i;
                continue;
            }
            else if (i==strsize-1 && str[strsize-2]!=str[strsize-1]){
                temp = str[i];
                empty += lookuptab[temp-48][0];
                ++i; continue;
            }
            else {
                temp = str[i]; count = 1;
                while (i<strsize-1 && str[++i]==temp){
                    ++count;
                }
                if (count>7){
                    if (count%7==0) count = 7;
                    else count=count%7;
                }
                empty += lookuptab[temp-48][count-1];
            }
        }
        else ++i;
    }
    return empty;
}

/********** UPDATE DECRYPT INTO CHAR::::

string decryptIntoChar(string str, int strsize){
    string lookuptab[4][7] = {{"E","F","G","H","I","J","K"},
                              {"L","M","N","O","P","Q","R"},
                              {"#","T","U","V","W","X","Y"},
                              {"@","A","S","Z","B","C","D"}};
    string empty = ""; 
    int count = 0,i=0;
    char temp; 
    while (i<strsize){
        if (str[i]>=48 && str[i]<=51){ 
            if (i==strsize-1 && str[strsize-2]==str[strsize-1]){
                ++i;
                continue;
            }
            else if (i==strsize-1 && str[strsize-2]!=str[strsize-1]){
                temp = str[i];
                empty += lookuptab[temp-48][0];
                ++i; continue;
            }
            else {
                temp = str[i]; count = 1;
                while (i<strsize-1 && str[++i]==temp){
                    ++count;
                }
                if (count>7){
                    if (count%7==0) count = 7;
                    else count=count%7;
                }
                empty += lookuptab[temp-48][count-1];
                if (temp == '2' && count==1){
                    empty += '*';
                }
            }
        }
        else ++i;
    }
    int newsize=empty.length();
    
	for (int  j = 0; j<newsize; ++j){
        if (empty[j]=='*'){
            int idx = j+1;
            while (idx<newsize){
                if (empty[idx]=='#' || empty[idx]=='@') break;
                idx++;
            }
            if (idx>j+1){
                int iter = j;
                while (iter<idx){
                    if (iter==idx-1){
                        if (empty[iter]=='Z') empty[iter] = 'A';
                        else empty[iter]=empty[iter-1]+1;
                    }
                    else empty[iter]=empty[iter+1];
                    ++iter;
                }
            }
        }
    }
    
    for (int  x = 0; x<newsize; ++x){
        if (empty[x]=='@'){
            int checkidx = x+1;
            while (checkidx<newsize){
                if (empty[checkidx]=='#' || empty[checkidx]=='@') break;
                checkidx++;
            }
            int temp = checkidx-1;
            checkidx-=1;
            for (int x1 = x+1; x1 < checkidx; ++x1){
                swap(empty[x1], empty[checkidx]);
                checkidx-=1;
            }
            x=temp;
        }
    }
    return empty;
}


**********************************/




string findBetrayals(string arr[], int n5){
    int traitors[26] = {};
    int point = 0;
    int thirdIDX=0; int firstIDX=0;  int secondIDX=0;
    string ret = "";
    
    for (int i = 0; i<n5; ++i){
        for (int j=0; j<6; ++j){
            point = 6-j;
            traitors[(int)str[j]-65]+=point;
        }
    }

    for(int i = 0; i<25; ++i){
        if (traitors[i] > traitors[firstIDX])
        {
            thirdIDX = secondIDX;
            secondIDX = firstIDX;
            firstIDX = i;
        }
        else if (traitors[i] > traitors[secondIDX])
        {
            thirdIDX = secondIDX;
            secondIDX = i;
        }
 
        else if (traitors[i] > traitors[thirdIDX])
            thirdIDX = i;
    }
    char firstBetray = firstIDX + 65;
    char secondBetray = secondIDXIDX + 65;
    char thirdBetray = thirdIDX + 65;
    ret = ret+firstBetray+secondBetray+thirdBetray;
    return ret;
}

FULL finBetray*******

string timPhanBoi(const string arr[], const int n5){
    int traitors[26] = {};
    int point = 0;
    int maxIDX=0;
    string treasons = "";
    
    for (int i = 0; i<n5; ++i){
        for (int j=0; j<6; ++j){
            point = 6-j;
            traitors[(int)arr[i][j]-65]+=point;
        }
    }

    for (int i = 0; i<3; ++i){
        int maxpoint = traitors[0];
        for (int j = 0; j<25; ++j){
            if (traitors[j]>maxpoint){
                maxpoint=traitors[j];
                maxIDX = j;
            }
        }
        char betrayal = maxIDX+65;
        treasons=treasons+betrayal;
        traitors[maxIDX]=-1;
    }
    
    
    for (int i = 0;i<26;++i){
        cout<<traitors[i]<<"  ";
    }
    return treasons;
}



string readyForBattle(const string ID[], const int NID, const string input1[], const int N1)
{
    return "You can remove this return";
}
