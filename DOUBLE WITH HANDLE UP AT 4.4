//The library here is concretely set, students are not allowed to include any other libraries.
#include <iostream>
#include <iomanip>
#include <cmath>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

////////////////////////////////////////////////////////////////////////////
/// STUDENT'S ANSWER HERE
////////////////////////////////////////////////////////////////////////////

string unwantedChar1(string str, int strsize){
    for (unsigned int  i = 0; i<strsize; ++i){
        if (str[i]=='#' || str[i]=='@'){
            str.erase(str.begin()+i);
            --i;
        }
    }
    return str;
}
string decryptBinary(string str, int strsize){
    string empty = "";
    unsigned int i = 0;
    while (i<strsize){
        if (str[i]==' '){
            ++i;
            empty += " ";
            continue;
        } 
        else if (str[i]=='0'){
            ++i;
            if (str[i]=='0') empty += "0";
            else if (str[i]=='1') empty +="1";
            ++i;
        }
        else if(str[i]=='1'){
            ++i;
            if (str[i]=='0') empty += "2";
            else if (str[i]=='1') empty +="3";
            ++i;
        }
    }
    return empty;
}

string decryptIntoChar(string str, int strsize){
    string lookuptab[4][7] = {{"E","F","G","H","I","J","K"},
                              {"L","M","N","O","P","Q","R"},
                              {"#","T","U","V","W","X","Y"},
                              {"@","A","S","Z","B","C","D"}};
    string empty = ""; 
    int count = 0;
    unsigned int i = 0;
    char temp; 
    while (i<strsize){
        if (str[i]>=48 && str[i]<=51){ 
            if (i==strsize-1 && str[i]==temp){
                ++i;
                continue;
            }
            temp = str[i]; count = 1;
            while (i<strsize-1 && str[++i]==temp){
                ++count;
            }
            if (count>7){
                if (count%7==0) count = 7;
                else count=count%7;
            }
            empty += lookuptab[temp-48][count-1];
        }
        else ++i;
    }
    return empty;
}

/* Update ham cuoi
string decryptIntoChar(string str, int strsize){
    string lookuptab[4][7] = {{"E","F","G","H","I","J","K"},
                              {"L","M","N","O","P","Q","R"},
                              {"#","T","U","V","W","X","Y"},
                              {"@","A","S","Z","B","C","D"}};
    string empty = ""; 
    int count = 0;
    unsigned int i = 0;
    char temp; 
    while (i<strsize){
        if (str[i]>=48 && str[i]<=51){ 
            if (i==strsize-1 && str[strsize-2]==str[strsize-1]){
                ++i;
                continue;
            }
            else if (i==strsize-1 && str[strsize-2]!=str[strsize-1]){
                temp = str[i];
                empty += lookuptab[temp-48][0];
                ++i; continue;
            }
            else {
                temp = str[i]; count = 1;
                while (i<strsize-1 && str[++i]==temp){
                    ++count;
                }
                if (count>7){
                    if (count%7==0) count = 7;
                    else count=count%7;
                }
                empty += lookuptab[temp-48][count-1];
            }
        }
        else ++i;
    }
    return empty;
}

*/


string readyForBattle(const string ID[], const int NID, const string input1[], const int N1)
{
    return "You can remove this return";
}
